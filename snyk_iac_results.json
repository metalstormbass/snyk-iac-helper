{
"meta": {
"isPrivate": true,
"isLicensesEnabled": false,
"ignoreSettings": null,
"org": "mike-co.",
"projectId": "",
"policy": ""
},
"filesystemPolicy": false,
"vulnerabilities": [],
"dependencyCount": 0,
"licensesPolicy": null,
"ignoreSettings": null,
"targetFile": "../goof/kubernetes/goof-deployment.yaml",
"projectName": "kubernetes",
"org": "mike-co.",
"policy": "",
"isPrivate": true,
"targetFilePath": "/Users/mike/Projects/goof/kubernetes/goof-deployment.yaml",
"packageManager": "k8sconfig",
"path": "../goof/kubernetes/goof-deployment.yaml",
"projectType": "k8sconfig",
"ok": false,
"infrastructureAsCodeIssues": [
{
"severity": "high",
"resolve": "Add `resources.limits.cpu` field with required CPU limit value",
"impact": "Containers without limits can exceed the capacity of the node, and affect availability/performance of the host and other containers.",
"msg": "input.spec.template.spec.containers[goof].resources.limits.cpu",
"remediation": {
"kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
"terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
},
"subType": "Deployment",
"issue": "CPU limit is not defined",
"publicId": "SNYK-CC-K8S-5",
"title": "Container is running without cpu limit",
"references": [
"CIS Docker Benchmark 1.2.0 - 5.11 Ensure that CPU priority is set appropriately on containers",
"https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
"https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
"https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/"
],
"id": "SNYK-CC-K8S-5",
"isIgnored": false,
"iacDescription": {
"issue": "CPU limit is not defined",
"impact": "Containers without limits can exceed the capacity of the node, and affect availability/performance of the host and other containers.",
"resolve": "Add `resources.limits.cpu` field with required CPU limit value"
},
"lineNumber": 18,
"documentation": "https://snyk.io/security-rules/SNYK-CC-K8S-5",
"isGeneratedByCustomRule": false,
"path": [
"[DocId: 0]",
"input",
"spec",
"template",
"spec",
"containers[goof]",
"resources",
"limits",
"cpu"
]
},
{
"severity": "low",
"resolve": "Set `securityContext.readOnlyRootFilesystem` to `true`",
"impact": "Compromised process could abuse writable root filesystem to elevate privileges",
"msg": "input.spec.template.spec.containers[goof].securityContext.readOnlyRootFilesystem",
"remediation": {
"kubernetes": "Set `securityContext.readOnlyRootFilesystem` to `true`",
"terraform": "Set `security_context.read_only_root_filesystem` to `true`"
},
"subType": "Deployment",
"issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
"publicId": "SNYK-CC-K8S-8",
"title": "Container is running with writable root filesystem",
"references": [
"CIS Docker Benchmark 1.2.0 - Ensure that the container's root filesystem is mounted as read only",
"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems",
"https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
],
"id": "SNYK-CC-K8S-8",
"isIgnored": false,
"iacDescription": {
"issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
"impact": "Compromised process could abuse writable root filesystem to elevate privileges",
"resolve": "Set `securityContext.readOnlyRootFilesystem` to `true`"
},
"lineNumber": 24,
"documentation": "https://snyk.io/security-rules/SNYK-CC-K8S-8",
"isGeneratedByCustomRule": false,
"path": [
"[DocId: 0]",
"input",
"spec",
"template",
"spec",
"containers[goof]",
"securityContext",
"readOnlyRootFilesystem"
]
},
{
"severity": "low",
"resolve": "Set `resources.limits.memory` value",
"impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
"msg": "input.spec.template.spec.containers[goof].resources.limits.memory",
"remediation": {
"kubernetes": "Set `resources.limits.memory` value",
"terraform": "Set `resources.limits.memory` value"
},
"subType": "Deployment",
"issue": "Memory limit is not defined",
"publicId": "SNYK-CC-K8S-4",
"title": "Container is running without memory limit",
"references": [
"CIS Docker Benchmark 1.2.0 - 5.10 Ensure that the memory usage for containers is limited",
"https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
"https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
],
"id": "SNYK-CC-K8S-4",
"isIgnored": false,
"iacDescription": {
"issue": "Memory limit is not defined",
"impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
"resolve": "Set `resources.limits.memory` value"
},
"lineNumber": 18,
"documentation": "https://snyk.io/security-rules/SNYK-CC-K8S-4",
"isGeneratedByCustomRule": false,
"path": [
"[DocId: 0]",
"input",
"spec",
"template",
"spec",
"containers[goof]",
"resources",
"limits",
"memory"
]
},
{
"severity": "low",
"resolve": "Add `livenessProbe` attribute",
"impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
"msg": "spec.template.spec.containers[goof].livenessProbe",
"remediation": {
"kubernetes": "Add `livenessProbe` attribute",
"terraform": "Add `liveness_probe` attribute"
},
"subType": "Deployment",
"issue": "Liveness probe is not defined",
"publicId": "SNYK-CC-K8S-41",
"title": "Container is running without liveness probe",
"references": [
"CIS Docker Benchmark v1.2.0 - 5.26 Ensure that container health is checked at runtime",
"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
"https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
],
"id": "SNYK-CC-K8S-41",
"isIgnored": false,
"iacDescription": {
"issue": "Liveness probe is not defined",
"impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
"resolve": "Add `livenessProbe` attribute"
},
"lineNumber": 18,
"documentation": "https://snyk.io/security-rules/SNYK-CC-K8S-41",
"isGeneratedByCustomRule": false,
"path": [
"[DocId: 0]",
"spec",
"template",
"spec",
"containers[goof]",
"livenessProbe"
]
},
{
"description": "",
"resolve": "Set `securityContext.runAsNonRoot` to `true`",
"id": "SNYK-CC-K8S-10",
"impact": "Container could be running with full administrative privileges",
"remediation": {
"kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
"terraform": "Set `security_context.run_as_non_root` to `true`"
},
"subType": "Deployment",
"publicId": "SNYK-CC-K8S-10",
"title": "Container is running without root user control",
"severity": "medium",
"msg": "input.spec.template.spec.containers[goof].securityContext.runAsNonRoot",
"issue": "Container is running without root user control",
"references": [
"CIS Docker Benchmark 1.2.0 - 5.5 Ensure sensitive host system directories are not mounted on containers",
"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups",
"https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
],
"isIgnored": false,
"iacDescription": {
"issue": "Container is running without root user control",
"impact": "Container could be running with full administrative privileges",
"resolve": "Set `securityContext.runAsNonRoot` to `true`"
},
"lineNumber": 24,
"documentation": "https://snyk.io/security-rules/SNYK-CC-K8S-10",
"isGeneratedByCustomRule": false,
"path": [
"[DocId: 0]",
"input",
"spec",
"template",
"spec",
"containers[goof]",
"securityContext",
"runAsNonRoot"
]
},
{
"severity": "medium",
"resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
"impact": "Containers are running with potentially unnecessary privileges",
"msg": "input.spec.template.spec.containers[goof].securityContext.capabilities.drop",
"remediation": {
"kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
"terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
},
"subType": "Deployment",
"issue": "All default capabilities are not explicitly dropped",
"publicId": "SNYK-CC-K8S-6",
"title": "Container does not drop all default capabilities",
"references": [
"https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
"https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
],
"id": "SNYK-CC-K8S-6",
"isIgnored": false,
"iacDescription": {
"issue": "All default capabilities are not explicitly dropped",
"impact": "Containers are running with potentially unnecessary privileges",
"resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
},
"lineNumber": 24,
"documentation": "https://snyk.io/security-rules/SNYK-CC-K8S-6",
"isGeneratedByCustomRule": false,
"path": [
"[DocId: 0]",
"input",
"spec",
"template",
"spec",
"containers[goof]",
"securityContext",
"capabilities",
"drop"
]
},
{
"severity": "high",
"resolve": "Set `securityContext.allowPrivilegeEscalation` to `false`",
"impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
"msg": "input.spec.template.spec.containers[goof].securityContext.allowPrivilegeEscalation",
"remediation": {
"kubernetes": "Set `securityContext.allowPrivilegeEscalation` to `false`",
"terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
},
"subType": "Deployment",
"issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
"publicId": "SNYK-CC-K8S-9",
"title": "Container is running without privilege escalation control",
"references": [
"CIS Docker Benchmark 1.2.0 - 5.25 Ensure that the container is restricted from acquiring additional privileges",
"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation",
"https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
],
"id": "SNYK-CC-K8S-9",
"isIgnored": false,
"iacDescription": {
"issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
"impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
"resolve": "Set `securityContext.allowPrivilegeEscalation` to `false`"
},
"lineNumber": 25,
"documentation": "https://snyk.io/security-rules/SNYK-CC-K8S-9",
"isGeneratedByCustomRule": false,
"path": [
"[DocId: 0]",
"input",
"spec",
"template",
"spec",
"containers[goof]",
"securityContext",
"allowPrivilegeEscalation"
]
},
{
"description": "",
"resolve": "Set `loadBalancerSourceRanges` attribute value to specific IP addresses",
"id": "SNYK-CC-K8S-15",
"impact": "This allows access to any traffic to the Node Security Group(s), potentially meaning everyone can access your service.",
"remediation": {
"kubernetes": "Set `loadBalancerSourceRanges` attribute value to specific IP addresses",
"terraform": "Set `load_balancer_source_ranges` attribute value to specific IP addresses"
},
"subType": "Service",
"publicId": "SNYK-CC-K8S-15",
"title": "Service does not restrict ingress sources",
"severity": "medium",
"msg": "service.spec.loadBalancerSourceRanges",
"issue": "Defining a Load balancer Service without setting the loadBalancerSourceRanges property will use the default value of 0.0.0.0/0.",
"references": [
"https://kubernetes.io/docs/concepts/services-networking/service/",
"https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/"
],
"isIgnored": false,
"iacDescription": {
"issue": "Defining a Load balancer Service without setting the loadBalancerSourceRanges property will use the default value of 0.0.0.0/0.",
"impact": "This allows access to any traffic to the Node Security Group(s), potentially meaning everyone can access your service.",
"resolve": "Set `loadBalancerSourceRanges` attribute value to specific IP addresses"
},
"lineNumber": 28,
"documentation": "https://snyk.io/security-rules/SNYK-CC-K8S-15",
"isGeneratedByCustomRule": false,
"path": [
"[DocId: 1]",
"service",
"spec",
"loadBalancerSourceRanges"
]
},
{
"severity": "critical",
"impact": "Incorrect image version could be deployed",
"msg": "michaelbraunbass/goof does not have tag",
"remediation": "Add a specific image tag. Do not use 'latest'",
"issue": "Container image does not have a tags",
"publicId": "KUBERNETES_CUSTOM_1",
"title": "Container image does not have a tag",
"references": [],
"id": "KUBERNETES_CUSTOM_1",
"isIgnored": false,
"iacDescription": {
"issue": "Container image does not have a tags",
"impact": "Incorrect image version could be deployed"
},
"lineNumber": 1,
"isGeneratedByCustomRule": true,
"path": [
"[DocId: 0]",
"michaelbraunbass/goof does not have tag"
]
}
]
}
